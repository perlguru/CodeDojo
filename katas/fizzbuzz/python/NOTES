Extending:
    Should we use test setup and/or teardown? Same for class setup and/or teardown.

    Consider dependency injection making the number part of the constructor.
    *RECONSIDERED*

    Explore using @classmethods and class variables. Profile alternative methods.
    *DONE* See translate5.

    Perhaps look at removing if's by creating a class "Number" that would explicatly
    generate "Fizz", "Buzz" or "FizzBuzz" as needed. Maybe even a class "Fizz" and a class "Buzz"?
    *DONE* See translate4. Used a defultdict to implement.

Otherwise this kata is fairly complete.

Lessons learned (or exposed):
Very simple OOD (Not a lot to be impressed by)
Perhaps profiling @classmethods may expose some efficiencies (Does not seem to)

Yes, it tends to be true, for a variety of reasons. One of which is that beginners get confused as to how to handle state, and so they sprinkle conditions all over their code in order to handle it.

Let's say that you are writing a video player, and you create callback functions for all the control buttons:

playBtn.on('click', function() { videoPlayer.play(); }); 
pauseBtn.on('click', function() { videoPlayer.pause(); }); 
muteBtn.on('click', function() { videoPlayer.mute(); }); 
... 
Then it turns out that, if you try to play a video that is still loading, the video player throws an error. In fact, you need to stop all the buttons from working when player is still loading. This is an example of state. The state of the player is "loading" or "loaded," and a beginner might deal with the problem this way:

playBtn.on('click', function() {  
  if(! videoPlayer.loading) { 
    videoPlayer.play(); 
  } 
}); 
 
pauseBtn.on('click', function() {  
  if(! videoPlayer.loading) { 
    videoPlayer.pause(); 
  } 
}); 
 
mute.on('click', function() {  
  if(! videoPlayer.loading) { 
    videoPlayer.mute(); 
  } 
}); 
As state becomes more and more complicated, these beginner ifs tend to sprout up like weeds:

playBtn.on('click', function() {  
  if (pageNotAnimating && videoPlayer) { 
  	if(! videoPlayer.loading && ! videoPlayer.ended()) { 
    	videoPlayer.play(); 
  	} else { 
       alert('Video can't be played!'); 
    } 
  } else { 
    alert('Video player not ready!'); 
  } 
}); 
... 
As you can see, this gets hard to read. It's extremely fragile. For instance, if you forget one of the ! characters, it won't work as expected, but due to the complexity, you might not realize why.

And it's the opposite of DRY (don't repeat yourself), since each button has the same conditions in it.

There are many better ways of architecting this. For instance, if the videoPlayer managed its own state (e.g. it knew not to play when it was loading), you wouldn't need to put ifs inside all the buttons. Or, if the videoPlayer is 3rd-party code that didn't manage its own state, you could put all your state management it one place:

function doCommand(command, errMessage) { 
  if (! videoPlayer.loading() && ! videoPlayer.ended()) { 
     command(); 
  } else { 
    alert(errMessage); 
  } 
} 
 
btnPlay.on('click', function() { 
  doCommand(videpPlayer.play, 'Can't play video'); 
}); 
 
btnPause.on('click', function() { 
  doCommand(videpPlayer.pause, 'Can't pause video'); 
}); 
 
btnMute.on('click', function() { 
  doCommand(videpPlayer.mute, 'Can't mute video'); 
}); 
As a side note, I'll say that experienced programmers tend to work hard to make their code as readable as possible, and so they'll refactor this ...

function doCommand(command, errMessage) { 
  if (! videoPlayer.loading() && ! videoPlayer.ended()) { 
     command(); 
  } else { 
    alert(errMessage); 
  } 
} 
... to this ...

function videoCanPlay() { 
   return ! videoPlayer.loading() && ! videoPlayer.ended(); 
} 
 
function doCommand(command, errMessage) { 
  if (videoCanPlay()) { 
     command(); 
  } else { 
    alert(errMessage); 
  } 
} 
We can also make it easier to read using early return statements:

function videoCanPlay() { 
   return ! videoPlayer.loading() && ! videoPlayer.ended(); 
} 
 
function doCommand(command, errMessage) { 
  if (videoCanPlay()) { 
     return command(); 
  } 
     
  alert(errMessage); 
} 